[
  { "term": "Monolithic Architecture", "definitionEng": "A software architecture where all components are combined into a single program", "definitionUkr": "Архітектура, де всі компоненти об’єднані в один застосунок" },
  { "term": "Microservices", "definitionEng": "An architecture that structures an application as a collection of loosely coupled services", "definitionUkr": "Архітектура, що складається з окремих, слабко зв’язаних сервісів" },
  { "term": "Service-Oriented Architecture", "definitionEng": "A design where services are provided to other components via a communication protocol", "definitionUkr": "Архітектура, де сервіси взаємодіють через протокол обміну" },
  { "term": "Event-Driven Architecture", "definitionEng": "A system where components communicate by emitting and reacting to events", "definitionUkr": "Система, де компоненти взаємодіють через події" },
  { "term": "Layered Architecture", "definitionEng": "A design approach that separates concerns into layers", "definitionUkr": "Підхід, що розділяє застосунок на логічні шари" },
  { "term": "Client-Server Architecture", "definitionEng": "A model where the client requests services and the server provides them", "definitionUkr": "Модель, де клієнт надсилає запити, а сервер надає відповіді" },
  { "term": "Domain-Driven Design", "definitionEng": "An approach that models software to match the business domain", "definitionUkr": "Підхід, що орієнтується на предметну область бізнесу" },
  { "term": "Clean Architecture", "definitionEng": "Separates business rules from UI and frameworks", "definitionUkr": "Відокремлює бізнес-логіку від інтерфейсу та інфраструктури" },
  { "term": "Hexagonal Architecture", "definitionEng": "Also called Ports and Adapters, isolates core logic", "definitionUkr": "Ізолює бізнес-логіку за допомогою портів і адаптерів" },
  { "term": "Serverless Architecture", "definitionEng": "A model where cloud provider handles infrastructure", "definitionUkr": "Хмарна модель, де інфраструктурою керує провайдер" },
  { "term": "Singleton", "definitionEng": "A pattern ensuring only one instance of a class exists", "definitionUkr": "Шаблон, що гарантує існування лише одного екземпляра класу" },
  { "term": "Factory Method", "definitionEng": "A pattern to create objects without specifying the exact class", "definitionUkr": "Шаблон для створення об’єктів без вказування конкретного класу" },
  { "term": "Builder Pattern", "definitionEng": "A pattern to construct complex objects step by step", "definitionUkr": "Шаблон для поступового створення складного об’єкта" },
  { "term": "Observer Pattern", "definitionEng": "A pattern where objects subscribe to events from another", "definitionUkr": "Шаблон, де об’єкти підписуються на події іншого об’єкта" },
  { "term": "Strategy Pattern", "definitionEng": "A pattern that enables selecting algorithm at runtime", "definitionUkr": "Шаблон, що дозволяє обирати алгоритм під час виконання" },
  { "term": "Decorator Pattern", "definitionEng": "A pattern that adds behavior to objects dynamically", "definitionUkr": "Шаблон, що динамічно додає поведінку об'єктам" },
  { "term": "Adapter Pattern", "definitionEng": "A pattern allowing incompatible interfaces to work together", "definitionUkr": "Шаблон для узгодження різних інтерфейсів" },
  { "term": "Proxy Pattern", "definitionEng": "Provides a surrogate or placeholder for another object", "definitionUkr": "Створює замінник для іншого об’єкта" },
  { "term": "Command Pattern", "definitionEng": "Encapsulates a request as an object", "definitionUkr": "Інкапсулює запит як об'єкт" },
  { "term": "Mediator Pattern", "definitionEng": "Coordinates communication between components", "definitionUkr": "Координує взаємодію між об’єктами" },
  { "term": "Repository Pattern", "definitionEng": "Encapsulates data access logic", "definitionUkr": "Інкапсулює логіку доступу до даних" },
  { "term": "Unit of Work", "definitionEng": "Tracks changes to objects during a business transaction", "definitionUkr": "Відстежує зміни об’єктів у межах транзакції" },
  { "term": "Dependency Injection", "definitionEng": "Dependencies are provided rather than created", "definitionUkr": "Залежності передаються ззовні, а не створюються всередині" },
  { "term": "Inversion of Control", "definitionEng": "Transfers control from program to framework", "definitionUkr": "Передає контроль зовнішньому середовищу або фреймворку" },
  { "term": "CQRS", "definitionEng": "Separates read and write operations", "definitionUkr": "Розділяє операції читання та запису" },
  { "term": "Event Sourcing", "definitionEng": "Stores state changes as a sequence of events", "definitionUkr": "Зберігає зміни стану у вигляді подій" },
  { "term": "Load Balancer", "definitionEng": "Distributes traffic across multiple servers", "definitionUkr": "Розподіляє навантаження між серверами" },
  { "term": "Scalability", "definitionEng": "Ability of a system to handle growth", "definitionUkr": "Здатність системи масштабуватись" },
  { "term": "Availability", "definitionEng": "System's readiness for correct service", "definitionUkr": "Готовність системи до коректної роботи" },
  { "term": "Latency", "definitionEng": "Time delay before a response", "definitionUkr": "Затримка у відповіді системи" },
  { "term": "Throughput", "definitionEng": "Amount of work done in a given time", "definitionUkr": "Пропускна здатність системи" },
  { "term": "Resilience", "definitionEng": "System's ability to recover from failure", "definitionUkr": "Здатність системи відновлюватись після збоїв" },
  { "term": "Circuit Breaker", "definitionEng": "Prevents repeated failures in unstable services", "definitionUkr": "Перериває запити до несправного сервісу" },
  { "term": "Rate Limiting", "definitionEng": "Restricting the number of requests to a service", "definitionUkr": "Обмеження кількості запитів до сервісу" },
  { "term": "Retry Pattern", "definitionEng": "Automatically retrying failed operations", "definitionUkr": "Автоматичне повторення невдалих запитів" },
  { "term": "Caching", "definitionEng": "Storing data to reduce access time", "definitionUkr": "Збереження даних для швидкого доступу" },
  { "term": "Message Queue", "definitionEng": "Stores messages between services", "definitionUkr": "Черга повідомлень між сервісами" },
  { "term": "Event Bus", "definitionEng": "Central component for handling events", "definitionUkr": "Центральний компонент для обробки подій" },
  { "term": "API Gateway", "definitionEng": "Single entry point to a system", "definitionUkr": "Єдина точка входу в систему" },
  { "term": "Service Registry", "definitionEng": "Keeps track of services and their locations", "definitionUkr": "Реєстр сервісів у системі" },
  { "term": "Configuration Server", "definitionEng": "Central server for configuration data", "definitionUkr": "Централізоване сховище конфігурацій" },
  { "term": "Blue-Green Deployment", "definitionEng": "Two environments: one live, one for updates", "definitionUkr": "Метод розгортання з двома середовищами" },
  { "term": "Canary Release", "definitionEng": "Gradual rollout to a subset of users", "definitionUkr": "Поступове впровадження для обраних користувачів" },
  { "term": "Immutable Infrastructure", "definitionEng": "Infrastructure components are replaced, not changed", "definitionUkr": "Компоненти інфраструктури не змінюються, а замінюються" },
  { "term": "Autoscaling", "definitionEng": "Automatic adjustment of resources", "definitionUkr": "Автоматичне масштабування ресурсів" },
  { "term": "Monitoring", "definitionEng": "Tracking system health and performance", "definitionUkr": "Відстеження стану і продуктивності системи" },
  { "term": "Logging", "definitionEng": "Capturing events and errors", "definitionUkr": "Фіксація подій і помилок у системі" },
  { "term": "Tracing", "definitionEng": "Following a request through the system", "definitionUkr": "Відстеження запиту через усю систему" },
  { "term": "Security by Design", "definitionEng": "Embedding security in the design phase", "definitionUkr": "Інтеграція безпеки на етапі проєктування" }
]
