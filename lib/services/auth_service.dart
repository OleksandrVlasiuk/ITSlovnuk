//auth_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<User?> register(String email, String password) async {
    final result = await _auth.createUserWithEmailAndPassword(email: email, password: password);
    return result.user;
  }

  Future<void> createUserDocument(User user) async {
    await _firestore.collection('users').doc(user.uid).set({
      'email': user.email,
      'createdAt': DateTime.now(),
      'role': 'user',
    });
  }

  Future<User?> login(String email, String password) async {
    try {
      final result = await _auth.signInWithEmailAndPassword(email: email, password: password);
      return result.user;
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found' || e.code == 'invalid-credential') {
        throw FirebaseAuthException(
          code: 'user-not-found',
          message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ.',
        );
      }
      rethrow;
    }
  }


  Future<bool> isAdmin() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return false;

    try {
      final docRef = FirebaseFirestore.instance.collection('users').doc(user.uid);
      final doc = await docRef.get();

      if (!doc.exists) {
        // –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –∑ —Ä–æ–ª–ª—é user
        await docRef.set({
          'email': user.email,
          'createdAt': DateTime.now(),
          'role': 'user',
        });
        return false;
      }

      final data = doc.data();
      if (data == null || !data.containsKey('role')) {
        // –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–º–∞—î –ø–æ–ª—è role ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ
        await docRef.update({'role': 'user'});
        return false;
      }

      return data['role'] == 'admin';
    } catch (e) {
      print('üî• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ä–æ–ª—ñ: $e');
      return false; // ‚ö†Ô∏è –ë–µ–∑–ø–µ—á–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞: –Ω–µ –∑–∞–≤–∏—Å–∞—î–º–æ
    }
  }


  Future<bool> deleteAccountAndData(BuildContext context, String password) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      _showSnack(context, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —É–≤—ñ–π—Ç–∏ —â–µ —Ä–∞–∑.");
      return false;
    }

    final uid = user.uid;

    try {
      final cred = EmailAuthProvider.credential(email: user.email!, password: password);
      await user.reauthenticateWithCredential(cred);
    } on FirebaseAuthException catch (e) {
      switch (e.code) {
        case 'wrong-password':
        case 'invalid-credential':
          _showSnack(context, '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
          break;
        case 'user-mismatch':
          _showSnack(context, '–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è. –£–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.');
          break;
        case 'too-many-requests':
          _showSnack(context, '–ó–∞–±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ.');
          break;
        case 'network-request-failed':
          _showSnack(context, '–ü—Ä–æ–±–ª–µ–º–∞ –∑ –º–µ—Ä–µ–∂–µ—é. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.');
          break;
        case 'requires-recent-login':
          _showSnack(context, '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ —É–≤—ñ–π—Ç–∏ –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º.');
          break;
        default:
          _showSnack(context, '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: ${e.message}');
      }
      return false;
    } catch (e) {
      _showSnack(context, '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å: $e');
      return false;
    }

    try {
      final firestore = FirebaseFirestore.instance;

      await firestore.collection('users').doc(uid).delete();
      await firestore.collection('statistics').doc(uid).delete();

      final decks = await firestore.collection('decks').where('userId', isEqualTo: uid).get();
      for (var d in decks.docs) {
        await d.reference.delete();
      }

      final cards = await firestore.collection('cards').where('userId', isEqualTo: uid).get();
      for (var c in cards.docs) {
        await c.reference.delete();
      }
    } on FirebaseException catch (e) {
      _showSnack(context, '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏: ${e.message}');
      return false;
    } catch (e) {
      _showSnack(context, '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: $e');
      return false;
    }

    try {
      await user.delete();
    } on FirebaseAuthException catch (e) {
      if (e.code == 'permission-denied') {
        _showSnack(context, '–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞. –ú–æ–∂–ª–∏–≤–æ, –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.');
      } else {
        _showSnack(context, '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞: ${e.message}');
      }
      return false;
    } catch (e) {
      _showSnack(context, '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞: $e');
      return false;
    }

    if (context.mounted) {
      _showSnack(context, '‚úÖ –ê–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.');
      return true;
    }

    return false;
  }

  void _showSnack(BuildContext context, String message) {
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(message)));
    }
  }



  Future<void> logout() async {
    await _auth.signOut();
  }

  Stream<User?> get authStateChanges => _auth.authStateChanges();
}
